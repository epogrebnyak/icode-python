# Я умею!

Как понять, что ты уже знаешь и умеешь достаточно, 
чтобы писать работающие программы на Python? 

Мы составили список навыков программирования, 
которые помогут тебе разобраться в этом вопросе.

## Среда программирования

- [ ] Могу запустить программу на Python в удаленной программной среде (СП-1).

::: {.callout-note collapse="true" title="Где можно программировать удаленно?"}

Основные редакторы:

- [Google Colab](https://colab.research.google.com/) - собственный ноутбук близкий к Jupyter.
- [repl.it](https://replit.com/) - редактор с командной строкой.

Стоит попробовать:

- [pyodide.org](https://pyodide.org/en/stable/console.html) - в режиме интерпретатора (`python -i`).
- [Yandex DataSphere](https://cloud.yandex.ru/ru/services/datasphere).
- [Github Codespaces](https://github.com/features/codespaces), [GitPod](https://gitpod.io/).

:::

**Дополнительно**

- [ ] Я могу запустить программу на Python на локальном компьютере (СП-2).

::: {.callout-note collapse="true" title="Как установить Python?"}

Для быстрого старта в программировании вам будет достаточно удаленной среды, 
но на локальном компьютере вы всегда сможете сделать немного больше.

Последнюю версию яызка программирования Python можно узнать и загрузить 
на [официальном сайте](https://www.python.org/downloads/). Здесь
же размещена документация и качественные обучающие материалы от создателей Python
(на английском языке). 

С небольшим опозданием после выхода новой версии языка сборка с большим количеством библиотек 
доступна на сайте [Аnaconda](https://www.anaconda.com/download). 
Это предпочтительный способ установки Python для задач анализа данных и машинного обучения.

Установка Python на локальный компьютер не всегда проходит гладко, 
будьте готовы решать возможные возникающие проблемы,
которые будут отличаться на Linux, Mac и Windows.

::: 

- [ ] Я использую удобный редактор, который подсвечивает синтаксис языка Python (СП-3).

::: {.callout-note collapse="true" title="О текстовых редакторах"}

Для работы с кодом  необходим текстовый редактор, например, 
такой как популярный [VS Code](https://code.visualstudio.com/).
Подойдет и [IDLE](https://docs.python.org/3/library/idle.html), 
который включен в состав языка Python, или [Spyder](https://www.spyder-ide.org/) 
из сборки [Anaconda](https://www.anaconda.com/download).
Не рекомендуем сразу устанавливать большую интегрированную среду разработки (IDE),
такую как [PyCharm](https://www.jetbrains.com/ru-ru/pycharm/). 
[Ноутбуки Jupyter](https://jupyter.org/try-jupyter/lab/) -- привычный способ 
работы в Python для аналитиков данных.

Важный момент -- редактор нужен для правки текста программы,
ее исполнением занимается интерпретатор языка Python, который не является частью редактора.
:::   

## Алгоритмизация

- [ ] Я знаю виды задач, для которых подходит Python (А-1).

- [ ] Я представляю программу как набор последовательных инструкций или блоков таких инструкций (А-2).

- [ ] Я умею разбить новую задачу на составные части и описать шаги для ее решения (A-3).

- [ ] Я умею приводить минимальные примеры для предлагаемых проектов и вычислений (A-4).


## Значения, типы данных, переменные

- [ ] Я знаю базовые типы данных, операторы и методы, применимые к этим типам данных (ТД-1):

   - целое и действительное число,
   - строка,
   - булевское значение (правда/ложь).

- [ ] Я знаю составные типы данных, операторы и методы, применимые к этим типам данных (ТД-2): 

   - список,
   - кортеж,
   - словарь.

- [ ] Я знаю, что такое переменные и для чего они используются в программе (ТД-3).

- [ ] Я могу составлять выражения из значений, переменных, операторов, методов и встроенных функций (ТД-4).

## Ход исполнения программы (control flow)

- [ ] Умею проверять условия и использовать `if ... else` для ветвления программы (CF-1).

- [ ] Я знаю, что такое циклы `while` и `for` и как их использовать (CF-2). 

## Ввод и вывод (input-output)

- [ ] При работе с терминалом я умею: 

   - выводить текст на экран (IO-1),
   - получать текст от пользователя с клавиатуры (IO-2).

- [ ] Я умею работать с текстовыми файлами:

   - записывать данные в текстовый файл (IO-3),
   - читать данные из текстового файла (IO-4).

## Функции, классы, пакеты

- [ ] Я умею создавать новые функциим (ФКП-1).

- [ ] Мне интересно, что такое класс, объект класса, атрибуты и методы (ФКП-2).

- [ ] Я умею устанавливать новые пакеты и импортировать в свой код функции и классы 
      из этих пакетов (ФКП-3).

## Коммуникации и качество кода

- [ ] Я умею сформулировать вопросы и предложения, позволяющие исправить 
      или улучшить написанный мною код (КК-1).

- [ ] Я ориентируюсь на принятые нормы и правила оформления программного кода (КК-2). 

## Дополнительные темы 

- [ ] Скачивание данных из сети Интернет, библиотеки `requests` и `httpx` (E-1).

- [ ] Cериализация данных и формат JSON (E-2).

- [ ] Табличные данные, датафреймы, библиотеки `pandas` и `polars` (E-3)

## Настрой настоящего программиста

Помимо изложенных выше навыков для успеха в программировании
важен положительный настрой, готовность самостоятельно 
находить проблемы и задачи, решаемые с помощью кода, искать и совершенствовать 
варианты решений, брать ответственность за неудачи и успехи в своей работе. 

**Логика программы**. Синтаксис языка не так важен, как умение 
разбить задачу на части, выбрать необходимые структуры данных 
и способы работы с ними. Очень часто обучающиеся стараются угадать,
"какой код написать", вместо того "что должна делать программа".

**Практика.** Ничто не заменит практику.
Можно сколько угодно слушать лекции, смотреть и даже неплохо понимать на чужой код,
мучать вопросами GigaChat или code-llama, но при этом не научиться программировать самому. 
Всячески советуем как можно раньше начать писать свой код, подбирать простые 
логические или даже бытовые задачи "не из учебника", из которых вы затем сможете 
собирать более сложные решения.

**Рефакторинг.** Код, который заработал – это победа. Но не всякий код, который работает, 
самый лучший.  Качество кода, который вы пишете, измеряется тем, насколько этот код пригоден
для решения новых задач или сделан на один раз, понятен ли он другим программистам,
сможете ли вы сами через месяц легко объяснить, что это код делает, удобно ли 
такой код тестировать и развивать. Чаще всего первые программы, которые вы напишете,
не будут совершенными и они потребуют последующей переработки, или "рефакторинга".

**Критерии успеха**. Помните, что даже небольшой код на 5-10 строк, который:

- вы придумали сами, 
- попробовали несколько вариантов,
- можете объяснить, почему вы выбрали конкретный вариант,
- побороли возникающие ошибки,
- видите в работе этого кода пользу для себя или для других, 
- хотите этот развивать или переиспользовать этот код в других проектах

\– это отличный результат в изучении программирования!
