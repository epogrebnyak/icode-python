# Я умею!

Как понять, что ты уже знаешь и умеешь достаточно, 
чтобы писать завершенные, пусть по началу и достаточно простые программы 
на Python? 

Мы составили список навыков программирования, 
которые помогут тебе разобраться в этом вопросе.

## Среда программирования

- [ ] Я выбрал удобный редактор, который подсвечивает синтаксис языка Python.

- [ ] Могу запустить программу на Python на своем компьютере или в удаленной среде.

## Алгоритмизация

- [ ] Я знаю виды задач, для которых подходит Python.

- [ ] Я представляю программу как последовательно набор инструкций или блоков инструкций.

- [ ] Я умею разбить новую задачу на составные части и описать шаги для ее решения.
      
- [ ] Я могу упростить сложную задачу и предложить ее минимальный вариант. 

## Значения, типы, переменные

- [ ] Я знаю базовые типы данных:

   - целое и действительное число,
   - строка,
   - булевское значение (правда/ложь).


- [ ] Я знаю составные типы данных: 

   - список,
   - кортеж,
   - словарь.

- [ ] Знаю операторы и методы применимые к типам данных выше.

- [ ] Я знаю, что такое переменные и для чего они используются в программе.

## Ход исполнения программы

- [ ] Умею проверять условия и использовать `if ... else` для ветвления программы.

- [ ] Я знаю, что такое циклы `while` и `for` и как их использовать. 

## Ввод и вывод

- [ ] Для работы с терминалом я умею:

   - выводить текст на экран,
   - получать текст от пользователя с клавиатуры.

- [ ] Я умею работать с текстовыми файлами:

   - записывать данные в текстовый файл,
   - читать данные из текстового файла.

## Функции, классы, пакеты

- [ ] Я умею создавать новые функции.

- [ ] Мне интересно, что такое класс, объект класса, атрибуты и методы.

- [ ] Я умею устанавливать новые пакеты и импортировать в свой код функции и классы 
      из этих пакетов.

## Коммуникации

- [ ] Я умею задать вопросы про исправление или улучшение написанного мною кода.

## Настрой настоящего программиста

Помимо изложенных выше навыков для успеха в программировании
важен положительный настрой, готовность самостоятельно 
искать и пробовать решения, совершенствовать эти решения, 
брать отвественность за неудачи и за успехи. 

**Логика программы**. Синтаксис языка не так важен, как умение 
разбить задачу на части, выбрать необходимые структуры данных 
и способы работы с ними. 

**Практика.** Ничто не заменит практику.
Можно сколько угодно слушать лекции и смотреть на чужой код,
мучать вопросами ChatGPT или code-llama, но можно раньше 
начать писать свой код, подбирать задачи "не из учебника" – 
это бесценно. 

**Рефакторинг.** Код, который просто работает, не всегда лучший. 
Качество кода, который вы пишете, измеряется тем, насколько этот код пригоден
для решения новых задач, понятен ли он другим программистам,
сможете ли вы сами через месяц легко объяснить, что это код делает, удобно ли 
такой код тестировать. Чаще всего первые программы, которые вы напишете,
будут не очень качественные, даже если он работают.

**Критерии успеха**. Помните, что даже небольшой код, который вы:

- придумали сами, 
- попробовали несколько вариантов,
- можете объяснить, почему выбрали на конкретный вариант,
- побороли возникающие ошибки,
- видите в работе этого кода пользу для себя или для других, 
- хотите этот развивать или переиспользовать этот код в других проектах

\– это отличный результат в программировании!
